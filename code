print("Welcome to the smartest stat calculator in the entire world!!")
import statistics as st 
import numpy as np
import math
import matplotlib.pyplot as plt
import scipy
import seaborn as sb
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import scipy.stats as stats
from scipy.stats import norm
def expo (n, p) : 
    return int(n) ** int(p)
def root (n) : 
    return math.sqrt(int(n))
def fac (n) : 
    return math.factorial(int(n))
def var1():
    sum = 0
    for i in x_list:
        sum+=i   
    sumsquare = 0
    for i in x_list:
        sumsquare = sumsquare + (i*i)
    mean = sum/len(x_list) 
    if len(x_list)%2 ==1:
        median = x_list[len(x_list)//2]
    elif len(x_list)%2 ==0:
        median = (x_list[len(x_list)//2]+ x_list[len(x_list)//2 -1])/2
    else:
        print('No values')  
    max = x_list[0]
    min = x_list[len(x_list)-1]   
    return "n = "+ str(len(x_list))+'\n'+"x̄ = "+str(mean)+'\n'+"σx = "+str(st.pstdev(x_list))+'\n'+"sx = "+str(st.stdev(x_list))+'\n'+'sumsquare = '+str(sumsquare)+'\n'+'median = '+str(median)+'\n'+'max = '+str(max)+'\n'+'min = '+str(min)
def abx_sum(a, b):
    if(a == "x"):
        powerxlist=[]
        for i in x_list:
            powerx = i ** b
            powerxlist.append(powerx)
        return(sum(powerxlist))
    elif(a == "y"):
        powerylist=[]
        for i in y_list:
            powery = i ** b
            powerylist.append(powery)
        return(sum(powerylist))
    else:
        print("Syntax Error")
        print("Enter x or y only")
def  abx_var():
    return "n = "+ str(len(x_list))+'\n'+"x̄ = "+str(sum(x_list)/len(x_list))+'\n'+"σx = "+str(st.pstdev(x_list))+'\n'+"sx = "+str(st.stdev(x_list))+"\n"+"ȳ = "+str(sum(y_list)/len(y_list))+'\n'+"σy = "+str(st.pstdev(y_list))+'\n'+"sy = "+str(st.stdev(y_list))
while True:
    print(""" 
    Mode
    1) Math
    2)Statistics
    """)
    mode = int(input("Choose Mode (1 is Math and 2 is Statistics) :    "))
    if(mode == 1):
        print(""" 
        Calculation
        1) Plus
        2) Minus
        3) Multiple
        4) Divide
        5) Expo
        6) Root
        7) Factorial
        """)
        mathmd=int(input("Choose calculation:"))
        if mathmd == 1:
            n1 =int(input("Input number#1 : ")) 
            n2 =int(input("Input number#2 : ")) 
            print('{} + {} = '.format(n1, n2),n1+n2)
        elif mathmd == 2:
            n1 =int(input("Input number#1 : ")) 
            n2 =int(input("Input number#2 : ")) 
            print('{} + {} = '.format(n1, n2),n1 - n2)
        elif mathmd == 3:
            n1 =int(input("Input number#1 : ")) 
            n2 =int(input("Input number#2 : ")) 
            print('{} * {} = '.format(n1, n2),n1 * n2)
        elif mathmd == 4:
            n1 =int(input("Input number#1 : ")) 
            n2 =int(input("Input number#2 : ")) 
            print('{} / {} = '.format(n1, n2),n1 / n2)
        elif mathmd == 5:
            n =int(input("Input base : ")) 
            p =int(input("Input exponent : ")) 
            print('{} ^ {} = '.format(n1, n2),expo(n, p))
        elif mathmd == 6:
            n =int(input("Input number#1 : ")) 
            print("square root" ,n ," = ",root(n))
        elif mathmd == 7:
            n =int(input("Input number : ")) 
            print("factorial",n," = ",fac(n))
        else:
            print("Syntax Error")
            print("Enter 1/2/3/4/5/6/7 only") 
    elif(mode == 2):
        print(""" 
        Statistics function
        1) 1-Var
        2) a+bx
        3) a+bx+cx^2
        4) Probability
        """)
        stat_mode = int(input("Choose function:"))
        if stat_mode == 1:
            x_data = input('Enter data x separated by space: ')
            x_list=x_data.split()
            print('x_data: ', x_list)
            for i in range(len(x_list)):    ##covert str to int
                x_list[i] = float(x_list[i])
            print(var1())
        elif stat_mode == 2:
            x_data = input('Enter data x separated by space: ')
            x_list=x_data.split()
            for i in range(len(x_list)):    ##covert str to int
                x_list[i] = float(x_list[i])
            y_data = input('Enter data y separated by space: ')
            y_list=y_data.split()
            for i in range(len(y_list)):    ##covert str to int
                y_list[i] = float(y_list[i])
            while len(x_list) > len(y_list):
                y_list.append(0)
            while len(y_list) > len(x_list):
                x_list.append(0)
            print('x_data: ', x_list)
            print('y_data: ', y_list)
            print(""" 
            Calculation
            1) Sum
            2) Var
            3) Reg
            4) MinMax
            """)
            st2cal=int(input("Choose calculation  :    "))
            if st2cal == 1:
                a= input("Which data you want to calculate?(x/y):")
                b= int(input("How many power of data ?:"))
                print("Sum of", a ,"power" , b,"=" ,abx_sum(a,b))
            elif st2cal == 2:
                print(abx_var())
            elif st2cal == 3: 
                slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(x_list, y_list)
                rs= r_value**2
                print("The equation :y= %.3fx + (%.3f)\nSlope : %.3f\nIntercept : %.3f\nr :  %.5f\nr^2 : %.5f" %(slope,intercept,slope,intercept,r_value,rs))
                plt.scatter(x_list,y_list)
                x = np.linspace(min(x_list),max(x_list),100)
                y = float(slope)*x+float(intercept)
                plt.plot(x, y, 'r-', label='y=2x+1')
                plt.xlabel("X")
                plt.ylabel("Y")
                plt.show()
            elif st2cal==4:
                print("Min x = ",min(x_list),"\nMax x = ",max(x_list),"\nMin y = ",min(y_list),"\nMax y = ",max(y_list))
            else:
                print("Syntax Error")
                print("Enter 1 or 2 or 3 only")
        elif stat_mode == 3:
            x_data = input('Enter data x separated by space: ')
            x_list=x_data.split()
            for i in range(len(x_list)):    ##covert str to int
                x_list[i] = float(x_list[i])
            y_data = input('Enter data y separated by space: ')
            y_list=y_data.split()
            for i in range(len(y_list)):    ##covert str to int
                y_list[i] = float(y_list[i])
            while len(x_list) > len(y_list):
                y_list.append(0)
            while len(y_list) > len(x_list):
                x_list.append(0)
            print('x_data: ', x_list)
            print('y_data: ', y_list)
            print(""" 
            Calculation
            1) Sum
            2) Var
            3) Reg
            4) MinMax
            """)
            st3cal=int(input("Choose calculation  :    "))
            if st3cal == 1:
                a= input("Which data you want to calculate?(x/y):")
                b= int(input("How many power of data ?:"))
                print("Sum of", a ,"power" , b,"=" ,abx_sum(a,b))
            elif st3cal ==2:
                print(abx_var())
            elif st3cal==3:
                model = np.poly1d(np.polyfit(x_list,y_list, 2))
                polyline = np.linspace(min(x_list), max(x_list), 100)
                plt.scatter(x_list,y_list)
                plt.plot(polyline, model(polyline),'r-')
                plt.xlabel("X")
                plt.ylabel("Y")
                plt.show()
                print("Quadatic equation = \n",model)
            elif st3cal==4:
                print("Min x = ",min(x_list),"\nMax x = ",max(x_list),"\nMin y = ",min(y_list),"\nMax y = ",max(y_list))
            else:
                print("Syntax Error")
                print("Enter 1/2/3/4 only")
        elif stat_mode == 4:
            print(""" 
                probability
                1) PDF
                2) CDF
                """) 
            st4cal=int(input("Choose propability  :    "))
            if st4cal == 1:
                x = float(input('X: '))
                mean = float(input('μ: '))
                sd = float(input('σ: '))
                dens=norm.pdf(x, mean, sd)
                print("Density = ",dens)
                plt.rcParams["figure.figsize"]=(7,7)
                plt.fill_between(x=np.arange(-5,x,0.01),y1=norm.pdf(np.arange(-5,x,0.01)),facecolor='red',alpha=0.35)
                plt.fill_between(x=np.arange(x,5,0.01),y1=norm.pdf(np.arange(x,5,0.01)),facecolor='blue',alpha=0.35)
                plt.text(0,0.4,"Density=")
                plt.text(1.5,0.4,dens)
                plt.show()
            elif st4cal == 2:
                lower = float(input('lower: '))
                upper =float(input('upper: '))
                mean = float(input('μ: '))
                sd = float(input('σ: '))
                if upper>=lower:
                    P1 = (upper - mean)/sd
                    P2 = (lower - mean)/sd
                    dens=norm.cdf(P1)-norm.cdf(P2)
                    print("Density = ",dens)
                    plt.rcParams["figure.figsize"]=(7,7)
                    plt.fill_between(x=np.arange(-5,P2,0.01),y1=norm.cdf(np.arange(-5,P2,0.01)),facecolor='red',alpha=0.35)
                    plt.fill_between(x=np.arange(P1,5,0.01),y1=norm.cdf(np.arange(P1,5,0.01)),facecolor='red',alpha=0.35)
                    plt.fill_between(x=np.arange(P2,P1,0.01),y1=norm.cdf(np.arange(P2,P1,0.01)),facecolor='blue',alpha=0.35)    
                    plt.text(0,1,"Density=")
                    plt.text(1.5,1,dens)
                    plt.show()
                else:
                    print("Syntax Error")
                    print("Enter 1 or 2 only")
        else:
            print("Syntax Error")
            print("Enter 1 , 2 or 3 only")
            
    else:
        print("Syntax Error")
        print("Enter 1 or 2 only")
    next_calculation = input("Let's do next calculation? (yes/no): ")
    if next_calculation == "no":
        print("Great,Bye")
        break
